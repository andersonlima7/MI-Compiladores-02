program = [constant_declaration_block] [variable_declaration_block] [class] [objects_declaration_block] main_class 

main_class = "class" "main" "{" main_class_content "};"
main_class_content = [variable_declaration_block] [objects_declaration_block]{commands} 

# Definições de Variáveis e Constantes

variable_declaration_block = "variables" "{" variable_list "};"
variable_list = variable_declaration {";" variable_declaration}
variable_declaration = type id ["=" id ["." id] | value] {"," id ["=" id ["." id] | value]}

constant_declaration_block = "const" "{" constant_list "};"
constant_list = constant_declaration {";" constant_declaration}
constant_declaration = type id "=" id ["." id] | value {"," id "=" id ["." id]| value}

# Definição de Objetos

objects_declaration_block = "objects" "{" object_list "};"
object_list = object_declaration {";" object_declaration}
object_declaration = id id "=" "constructor(" parameter_list ")" {"," id "=" "constructor(" parameter_list ")"}
parameter_list = id ["." id] | value {"," id ["." id] | value}

# Expressões Condicionais e Relacionais

<cmd_if> ::= if '(' <rel_expr> | <log_expr> ')' then <cmd_if>
              | if '(' <rel_expr> | <log_expr> ')'then <cmd_then> else <cmd_if>

<cmd_then>  ::= if '(' <rel_expr> | <log_expr> ')' then <cmd_then> else <cmd_then>

<rel_expr> ::= <val_expr> LOG <val_expr>
<log_expr> ::= <val_expr> LOG <val_expr> | <log_not>
<log_not> ::= '!' <val_expr>
<val_expr> ::=  IDE | NRO | CAC | boolean 


# Comandos
commands = for_command | print-command | read_command | assignment_command | method_call
assignment_command = id ["." id]"=" (id ["." id] | value)
for_command = "for(" cond-expression {log_op cond-expression} ") {" {commands} "};" 
print_command = "print("id ["." id] | value");"
read_command = "read" "(" id ["." id] ");"
method_call = id "->" id "(" parameter_list ");"

# Expressões

<expression> ::= <string> | <variable> | <number> | <boolean> # | <method-call>
<argument-list> ::= <expression> | <expression> "," <expression>


<cond-expression> :=  <rel_expr> | <log_expr> | <boolean>

# Estrutura léxica da linguagem

id = letter {letter | digit | "_"};  # valid identifier
string_literal = '"'{letter | digit | symbol}'"'
number := digit { digit } [ '.' digit { digit } ]
<relational operator> ::= '!=' | '==' | '<' | '<=' | '>' | '>=' | '='
boolean := 'true' | 'false'
log_op := '&&' | '||'
log_not := '!' val_expr
array = "["[value {","value}]"]"
value = number | string_literal | boolean | array 
type = "int" {"[" digit "]"} | "real" {"[" digit "]"} | "string" {"[" digit "]"} | "boolean" {"[" digit "]"}
digit := '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
letter := 'a'| 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'


# Definições de Classes

class = "class" id ["extends" id]"{"  class-content  "}"
class-content = methods  constructor  variable_declaration_block

# Definições de Métodos

methods = "methods"  "{"  method-list  "}"
method-list = method  { method }
method = "void" | type  id  "("  parameters  ")"  "{"  method-content  "}"
method-content = { statement }
parameters = param  { "," , param }
param = type  id
statement = "return"  value  ";"
constructor = "constructor"  "("  parameters  ")"  "{"  constructor-content  "}"
constructor-content = { assignment }
assignment = "this"  "."  id assignment-end;
assignment-end = ["=" assignment-value] ";"
assignment-value = id | value


