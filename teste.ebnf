program = [constant_declaration_block] [variable_declaration_block] [class] [objects_declaration_block] main_class 

main_class = "class" "main" "{" main_class_content "};"
main_class_content = [variable_declaration_block] [objects_declaration_block]{commands} 



# --------------------- Definições de Variáveis e Constantes ---------------------
variable_declaration_block = "variables" "{" variable_list "};"
variable_list = variable_declaration {";" variable_declaration}
variable_declaration = type id ["=" id | value] {"," id ["=" id | value]}

constant_declaration_block = "const" "{" constant_list "};"
constant_list = constant_declaration {";" constant_declaration}
constant_declaration = type id "=" id | value {"," id "=" id| value}



# --------------------- Definições de Classes e Métodos ---------------------
class = "class" id ["extends" id] "{"  class-content  "}"
class-content = methods  constructor  variable_declaration_block

methods = "methods"  "{"  method-list  "}"
method-list = method  { method }
method = "void" | type  id  "("  parameters  ")"  "{"  method-content  "}"
method-content = { statement }
parameters = param  { "," , param }
param = type  id
statement = "return"  value  ";"
constructor = "constructor"  "("  parameters  ")"  "{"  constructor-content  "}"
constructor-content = { assignment }
assignment = "this"  "."  id assignment-end;
assignment-end = ["=" assignment-value] ";"
assignment-value = id | value



# --------------------- Definição de Objetos ---------------------
objects_declaration_block = "objects" "{" object_list "};"
object_list = object_declaration {";" object_declaration}
object_declaration = id id "=" "constructor(" parameter_list ")" {"," id "=" "constructor(" parameter_list ")"}
parameter_list = id | value {"," id | value}




# --------------------- Expressões relacionais e lógicas ---------------------
expression = relational_expression | logical_expression | value | id
relational_expression = expression "==" expression | expression "!=" expression | expression "<" expression | expression ">" expression | expression "<=" expression | expression ">=" expression
logical_expression = expression "&&" expression | expression "||" expression | "!" expression

commands = { command }
command = if_statement | for_statement | print_command | read_command | assignment | method_call

if_statement = "if" "(" expression ")" "{" commands "}" ["else" "{" commands "}"]
for_statement = "for" "(" expression ")" "{" commands "}"
print_command = "print" "(" expression ")" ";"
read_command = "read" "(" id | id '.' id ")" ";" 